{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/http.service\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/progress-spinner\";\nfunction PostCreateComponent_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\nfunction PostCreateComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Post Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PostCreateComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r3.imagePreview, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction PostCreateComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Content is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class PostCreateComponent {\n  constructor(router, http, activatedRoute) {\n    this.router = router;\n    this.http = http;\n    this.activatedRoute = activatedRoute;\n    this.postId = \"\";\n    this.post = {\n      title: \"\",\n      content: \"\"\n    };\n    this.mode = \"create\";\n    this.isLoading = false;\n    this.newPost = new EventEmitter();\n    // updateOn: \"blur\"\n    this.form = new FormGroup({\n      title: new FormControl(\"\", {\n        validators: [Validators.required]\n      }),\n      content: new FormControl(\"\", {\n        validators: [Validators.required]\n      }),\n      image: new FormControl(null)\n    });\n  }\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(params => {\n      if (params.get(\"id\")) {\n        this.mode = \"edit\";\n        this.postId = params.get(\"id\");\n        this.getPost();\n        this.form.setValue({\n          title: this.post?.title,\n          content: this.post?.content,\n          image: \"\"\n        });\n      } else {\n        this.mode = \"create\";\n        this.postId = \"\";\n      }\n    });\n    console.log(\"this.post\");\n  }\n  onCreatePost() {\n    if (this.form.invalid) return;\n    // if(this.mode === \"create\"){\n    //   this.isLoading = true;\n    //   console.log(\"ran....\");\n    //   // const formData = new FormData();\n    //   // formData.append(\"title\", this.form.value.title);\n    //   // formData.append(\"content\", this.form.value.content);\n    //   // formData.append(\"image\", this.file, this.file.name);\n    //   // this.http.post(\"posts\", formData, (data: any) => {\n    //   //   if(data.success){\n    //   //     this.isLoading = false;\n    //   //   }\n    //   // });\n    // }else if(this.mode === \"edit\"){\n    //   this.isLoading = true;\n    //   this.http.patch(`posts/${this.postId}`, {title: this.form.value.title, content: this.form.value.content}, (data: any) => {\n    //     if(data.success){\n    //       console.log(\"sent\");\n    //       this.isLoading = false;\n    //     }\n    //   });\n    // }\n    console.log(\"hii\");\n    this.form.reset();\n  }\n  getPost() {\n    this.http.get(`posts/${this.postId}`, data => {\n      this.post = this.form.patchValue({\n        title: data.data.title,\n        content: data.data.content\n      });\n    });\n  }\n  onImageSelected(e) {\n    const file = e.target.files[0];\n    this.file = file;\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result;\n    };\n    reader.readAsDataURL(file);\n  }\n}\nPostCreateComponent.ɵfac = function PostCreateComponent_Factory(t) {\n  return new (t || PostCreateComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.HttpService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\nPostCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PostCreateComponent,\n  selectors: [[\"app-post-create\"]],\n  outputs: {\n    newPost: \"newPost\"\n  },\n  decls: 22,\n  vars: 5,\n  consts: [[1, \"container\"], [4, \"ngIf\"], [3, \"formGroup\"], [\"type\", \"text\", \"placeholder\", \"Post title\", \"matInput\", \"\", \"name\", \"title\", \"formControlName\", \"title\"], [\"mat-stroked-button\", \"\", 3, \"click\"], [\"type\", \"file\", 3, \"change\"], [\"filePicker\", \"\"], [\"placeholder\", \"Post content\", \"id\", \"content\", \"cols\", \"30\", \"rows\", \"10\", \"name\", \"content\", \"matInput\", \"\", \"formControlName\", \"content\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"name\", \"image\", \"formControlName\", \"image\", \"alt\", \"\", 3, \"src\"]],\n  template: function PostCreateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r5 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"section\", 0);\n      i0.ɵɵtemplate(1, PostCreateComponent_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 1);\n      i0.ɵɵelementStart(2, \"mat-card\")(3, \"mat-card-content\")(4, \"form\", 2)(5, \"mat-form-field\");\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵtemplate(7, PostCreateComponent_mat_error_7_Template, 2, 0, \"mat-error\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"br\");\n      i0.ɵɵelementStart(9, \"div\")(10, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function PostCreateComponent_Template_button_click_10_listener() {\n        i0.ɵɵrestoreView(_r5);\n        const _r2 = i0.ɵɵreference(13);\n        return i0.ɵɵresetView(_r2.click());\n      });\n      i0.ɵɵtext(11, \"Pick Image\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 5, 6);\n      i0.ɵɵlistener(\"change\", function PostCreateComponent_Template_input_change_12_listener($event) {\n        return ctx.onImageSelected($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, PostCreateComponent_div_14_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"mat-form-field\");\n      i0.ɵɵelement(17, \"textarea\", 7);\n      i0.ɵɵtemplate(18, PostCreateComponent_mat_error_18_Template, 2, 0, \"mat-error\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵelementStart(20, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function PostCreateComponent_Template_button_click_20_listener() {\n        return ctx.onCreatePost();\n      });\n      i0.ɵɵtext(21, \"Save Post\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"title\"));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.imagePreview);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"content\"));\n    }\n  },\n  dependencies: [i3.MatFormField, i3.MatError, i4.MatInput, i5.MatButton, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i7.NgIf, i8.MatCard, i8.MatCardContent, i9.MatProgressSpinner],\n  styles: [\"mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\ninput[_ngcontent-%COMP%] {\\n  background-color: transparent !important;\\n}\\n\\ninput[type=file][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\nimg[_ngcontent-%COMP%] {\\n  width: 200px;\\n  height: 200px;\\n  object-fit: contain;\\n  margin-top: 10px;\\n}\\n/*# sourceURL=webpack://./src/app/components/post-create/post-create.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wb3N0LWNyZWF0ZS9wb3N0LWNyZWF0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7QUFDSjs7QUFFQTtFQUNJLHdDQUFBO0FBQ0o7O0FBRUE7RUFDSSxhQUFBO0FBQ0o7O0FBRUE7RUFDSSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1mb3JtLWZpZWxkIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbmlucHV0IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbn1cblxuaW5wdXRbdHlwZT1maWxlXSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbmltZyB7XG4gIHdpZHRoOiAyMDBweDtcbiAgaGVpZ2h0OiAyMDBweDtcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcbiAgbWFyZ2luLXRvcDogMTBweDtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","FormGroup","Validators","i0","PostCreateComponent","constructor","router","http","activatedRoute","title","content","form","validators","required","image","ngOnInit","paramMap","subscribe","params","get","mode","postId","getPost","setValue","post","console","log","onCreatePost","invalid","reset","data","patchValue","onImageSelected","e","file","target","files","reader","FileReader","onload","imagePreview","result","readAsDataURL","selectors","outputs","newPost","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/mac/Documents/messages-social/frontend/src/app/components/post-create/post-create.component.ts","/Users/mac/Documents/messages-social/frontend/src/app/components/post-create/post-create.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { Post } from 'src/app/interfaces/posts.model';\nimport { HttpService } from 'src/app/services/http.service';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.scss']\n})\nexport class PostCreateComponent implements OnInit {\n    postId: any = \"\";\n    post: any = { title: \"\", content: \"\" };\n    test:any;\n    mode = \"create\";\n    isLoading = false;\n    imagePreview: any;\n    form:FormGroup;\n    file: any;\n    @Output() newPost = new EventEmitter<any>();\n\n    constructor(private router: Router, private http: HttpService, private activatedRoute: ActivatedRoute){\n      // updateOn: \"blur\"\n      this.form = new FormGroup({\n        title: new FormControl(\"\", { validators: [Validators.required] }),\n        content: new FormControl(\"\", { validators: [Validators.required] }),\n        image: new FormControl(null)\n      });\n    }\n\n    ngOnInit(): void {\n      this.activatedRoute.paramMap.subscribe((params: ParamMap) => {\n        if(params.get(\"id\")){\n          this.mode = \"edit\";\n          this.postId = params.get(\"id\");\n          this.getPost();\n          this.form.setValue({ title: this.post?.title, content: this.post?.content, image: \"\" });\n        }else {\n          this.mode = \"create\";\n          this.postId = \"\";\n        }\n      })\n      console.log(\"this.post\");\n    }\n\n    onCreatePost(){\n      if (this.form.invalid) return;\n\n      // if(this.mode === \"create\"){\n      //   this.isLoading = true;\n      //   console.log(\"ran....\");\n      //   // const formData = new FormData();\n      //   // formData.append(\"title\", this.form.value.title);\n      //   // formData.append(\"content\", this.form.value.content);\n      //   // formData.append(\"image\", this.file, this.file.name);\n      //   // this.http.post(\"posts\", formData, (data: any) => {\n      //   //   if(data.success){\n      //   //     this.isLoading = false;\n      //   //   }\n      //   // });\n      // }else if(this.mode === \"edit\"){\n      //   this.isLoading = true;\n      //   this.http.patch(`posts/${this.postId}`, {title: this.form.value.title, content: this.form.value.content}, (data: any) => {\n      //     if(data.success){\n      //       console.log(\"sent\");\n      //       this.isLoading = false;\n      //     }\n      //   });\n      // }\n\n      console.log(\"hii\");\n\n      this.form.reset();\n    }\n\n    getPost(){\n      this.http.get(`posts/${this.postId}`, (data: any) => {\n        this.post = this.form.patchValue({\n          title: data.data.title,\n          content: data.data.content\n        });\n\n      })\n    }\n\n    onImageSelected(e: any){\n      const file = e.target.files[0];\n      this.file = file;\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        this.imagePreview = reader.result;\n      }\n\n      reader.readAsDataURL(file);\n    } \n\n\n}\n","<section class=\"container\">\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <mat-card>\n    <!-- (submit)=\"onCreatePost()\" -->\n    <mat-card-content>\n      <form [formGroup]=\"form\">\n        <mat-form-field>\n          <input\n            type=\"text\"\n            placeholder=\"Post title\"\n            matInput\n            name=\"title\"\n            formControlName=\"title\"\n            />\n          <mat-error *ngIf=\"form.get('title')\">Post Title is required</mat-error>\n        </mat-form-field>\n\n        <br>\n\n        <div>\n          <button mat-stroked-button (click)=\"filePicker.click()\">Pick Image</button>\n          <input type=\"file\" (change)=\"onImageSelected($event)\" #filePicker>\n        </div>\n\n        <div *ngIf=\"imagePreview\">\n          <img [src]=\"imagePreview\" name=\"image\" formControlName=\"image\" alt=\"\">\n        </div>\n\n        <br>\n\n        <mat-form-field>\n          <textarea\n            placeholder=\"Post content\"\n            id=\"content\"\n            cols=\"30\"\n            rows=\"10\"\n            name=\"content\"\n            matInput\n            formControlName=\"content\"\n            ></textarea>\n          <mat-error *ngIf=\"form.get('content')\">Content is required</mat-error>\n        </mat-form-field>\n\n        <br>\n\n        <button type=\"submit\" mat-raised-button color=\"primary\" (click)=\"onCreatePost()\">Save Post</button>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</section>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}