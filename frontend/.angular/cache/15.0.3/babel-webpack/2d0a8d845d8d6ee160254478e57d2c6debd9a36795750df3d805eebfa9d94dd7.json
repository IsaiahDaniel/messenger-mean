{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Output } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nlet PostCreateComponent = class PostCreateComponent {\n  constructor(router, http, activatedRoute) {\n    this.router = router;\n    this.http = http;\n    this.activatedRoute = activatedRoute;\n    this.postId = \"\";\n    this.post = {\n      title: \"\",\n      content: \"\"\n    };\n    this.mode = \"create\";\n    this.isLoading = false;\n    this.newPost = new EventEmitter();\n    this.form = new FormGroup({\n      title: new FormGroup(\"\", {\n        validators: [Validators.required],\n        updateOn: \"blur\"\n      }),\n      content: new For()\n    });\n  }\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(params => {\n      if (params.get(\"id\")) {\n        this.mode = \"edit\";\n        this.post = {\n          title: this.post.title,\n          content: this.post.content\n        };\n        this.postId = params.get(\"id\");\n      } else {\n        console.log(\"id dosent exists\");\n        this.mode = \"create\";\n        this.postId = \"\";\n      }\n    });\n    this.getPost();\n  }\n  onCreatePost() {\n    if (this.form.invalid) return;\n    if (this.mode === \"create\") {\n      this.isLoading = true;\n      this.http.post(\"posts\", {\n        title: this.form.value.title,\n        content: this.form.value.content\n      }, data => {\n        if (data.success) {\n          this.isLoading = false;\n        }\n      });\n    } else if (this.mode === \"edit\") {\n      this.isLoading = true;\n      this.http.patch(`posts/${this.postId}`, {\n        title: this.form.value.title,\n        content: this.form.value.content\n      }, data => {\n        if (data.success) {\n          console.log(\"sent\");\n          this.isLoading = false;\n        }\n      });\n    }\n    this.form.reset();\n  }\n  getPost() {\n    this.http.get(`posts/${this.postId}`, data => {\n      this.post = data.data;\n    });\n  }\n};\n__decorate([Output()], PostCreateComponent.prototype, \"newPost\", void 0);\nPostCreateComponent = __decorate([Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.scss']\n})], PostCreateComponent);\nexport { PostCreateComponent };","map":{"version":3,"mappings":"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","names":["Component","EventEmitter","Output","FormGroup","Validators","PostCreateComponent","constructor","router","http","activatedRoute","title","content","form","validators","required","updateOn","For","ngOnInit","paramMap","subscribe","params","get","mode","post","postId","console","log","getPost","onCreatePost","invalid","isLoading","value","data","success","patch","reset","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/mac/Documents/messages-social/frontend/src/app/components/post-create/post-create.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { Post } from 'src/app/interfaces/posts.model';\nimport { HttpService } from 'src/app/services/http.service';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.scss']\n})\nexport class PostCreateComponent implements OnInit {\n    postId: any = \"\";\n    post = {\n      title: \"\",\n      content: \"\"\n    };\n    mode = \"create\";\n    isLoading = false;\n    form:FormGroup;\n    @Output() newPost = new EventEmitter<any>();\n\n    constructor(private router: Router, private http: HttpService, private activatedRoute: ActivatedRoute){\n      this.form = new FormGroup({\n        title: new FormGroup(\"\", { validators: [Validators.required], updateOn: \"blur\" }),\n        content: new For\n      })\n    }\n\n    ngOnInit(): void {\n      this.activatedRoute.paramMap.subscribe((params: ParamMap) => {\n        if(params.get(\"id\")){\n          this.mode = \"edit\";\n          this.post = {\n            title: this.post.title,\n            content: this.post.content\n          };\n          this.postId = params.get(\"id\");\n        }else {\n          console.log(\"id dosent exists\");\n          this.mode = \"create\";\n          this.postId = \"\";\n        }\n      })\n\n     this.getPost();\n\n    }\n\n    onCreatePost(){\n      if (this.form.invalid) return;\n\n      if(this.mode === \"create\"){\n        this.isLoading = true;\n        this.http.post(\"posts\", {title: this.form.value.title, content: this.form.value.content}, (data: any) => {\n          if(data.success){\n            this.isLoading = false;\n          }\n        });\n      }else if(this.mode === \"edit\"){\n        this.isLoading = true;\n        this.http.patch(`posts/${this.postId}`, {title: this.form.value.title, content: this.form.value.content}, (data: any) => {\n          if(data.success){\n            console.log(\"sent\");\n            this.isLoading = false;\n          }\n        });\n      }\n\n      this.form.reset();\n    }\n\n    getPost(){\n      this.http.get(`posts/${this.postId}`, (data: any) => {\n        this.post = data.data;\n      })\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}