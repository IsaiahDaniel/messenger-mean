{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/http.service\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/progress-spinner\";\nfunction PostCreateComponent_mat_spinner_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\nfunction PostCreateComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Post Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PostCreateComponent_mat_error_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Content is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class PostCreateComponent {\n  constructor(router, http, activatedRoute) {\n    this.router = router;\n    this.http = http;\n    this.activatedRoute = activatedRoute;\n    this.postId = \"\";\n    this.post = {\n      title: \"\",\n      content: \"\"\n    };\n    this.mode = \"create\";\n    this.isLoading = false;\n    this.newPost = new EventEmitter();\n    this.form = new FormGroup({\n      title: new FormControl(\"\", {\n        validators: [Validators.required],\n        updateOn: \"blur\"\n      }),\n      content: new FormControl(\"\", {\n        validators: [Validators.required],\n        updateOn: \"blur\"\n      })\n    });\n    console.log(\"post\", this.post);\n    console.log(\"test\", this.test);\n  }\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(params => {\n      if (params.get(\"id\")) {\n        this.mode = \"edit\";\n        this.postId = params.get(\"id\");\n        console.log(\"this.post onInit\", this.post);\n        const post = this.getPost();\n        this.form.setValue({\n          title: this.post?.title,\n          content: this.post?.content\n        });\n      } else {\n        this.mode = \"create\";\n        this.postId = \"\";\n      }\n    });\n  }\n  onCreatePost() {\n    if (this.form.invalid) return;\n    if (this.mode === \"create\") {\n      this.isLoading = true;\n      this.http.post(\"posts\", {\n        title: this.form.value.title,\n        content: this.form.value.content\n      }, data => {\n        if (data.success) {\n          this.isLoading = false;\n        }\n      });\n    } else if (this.mode === \"edit\") {\n      this.isLoading = true;\n      this.http.patch(`posts/${this.postId}`, {\n        title: this.form.value.title,\n        content: this.form.value.content\n      }, data => {\n        if (data.success) {\n          console.log(\"sent\");\n          this.isLoading = false;\n        }\n      });\n    }\n    this.form.reset();\n  }\n  getPost() {\n    this.http.get(`posts/${this.postId}`, data => {\n      this.post = this.form.patchValue({\n        title: data.data.title,\n        content: data.data.content\n      });\n    });\n  }\n}\nPostCreateComponent.ɵfac = function PostCreateComponent_Factory(t) {\n  return new (t || PostCreateComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.HttpService), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n};\nPostCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PostCreateComponent,\n  selectors: [[\"app-post-create\"]],\n  outputs: {\n    newPost: \"newPost\"\n  },\n  decls: 22,\n  vars: 5,\n  consts: [[1, \"container\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"text\", \"placeholder\", \"Post title\", \"matInput\", \"\", \"name\", \"title\", \"formControlName\", \"title\"], [\"mat-stroked-button\", \"\", 3, \"click\"], [\"type\", \"file\"], [\"filePicker\", \"\"], [\"placeholder\", \"Post content\", \"id\", \"content\", \"cols\", \"30\", \"rows\", \"10\", \"name\", \"content\", \"matInput\", \"\", \"formControlName\", \"content\", 3, \"value\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\"]],\n  template: function PostCreateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r4 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"section\", 0);\n      i0.ɵɵtemplate(1, PostCreateComponent_mat_spinner_1_Template, 1, 0, \"mat-spinner\", 1);\n      i0.ɵɵelementStart(2, \"mat-card\")(3, \"mat-card-content\")(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function PostCreateComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onCreatePost();\n      });\n      i0.ɵɵelementStart(5, \"mat-form-field\");\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵtext(7, \" [value]=\\\"post.title\\\" \");\n      i0.ɵɵtemplate(8, PostCreateComponent_mat_error_8_Template, 2, 0, \"mat-error\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"br\");\n      i0.ɵɵelementStart(10, \"div\")(11, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function PostCreateComponent_Template_button_click_11_listener() {\n        i0.ɵɵrestoreView(_r4);\n        const _r2 = i0.ɵɵreference(14);\n        return i0.ɵɵresetView(_r2.click());\n      });\n      i0.ɵɵtext(12, \"Pick Image\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 5, 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"mat-form-field\");\n      i0.ɵɵelement(17, \"textarea\", 7);\n      i0.ɵɵtemplate(18, PostCreateComponent_mat_error_18_Template, 2, 0, \"mat-error\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"br\");\n      i0.ɵɵelementStart(20, \"button\", 8);\n      i0.ɵɵtext(21, \"Save Post\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"title\"));\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"value\", ctx.post.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.form.get(\"content\"));\n    }\n  },\n  dependencies: [i3.MatFormField, i3.MatError, i4.MatInput, i5.MatButton, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.FormGroupDirective, i6.FormControlName, i7.NgIf, i8.MatCard, i8.MatCardContent, i9.MatProgressSpinner],\n  styles: [\"mat-form-field[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\ninput[_ngcontent-%COMP%] {\\n  background-color: transparent !important;\\n}\\n\\ninput[type=file][_ngcontent-%COMP%] {\\n  display: none;\\n}\\n/*# sourceURL=webpack://./src/app/components/post-create/post-create.component.scss */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wb3N0LWNyZWF0ZS9wb3N0LWNyZWF0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7QUFDSjs7QUFFQTtFQUNJLHdDQUFBO0FBQ0o7O0FBRUE7RUFDSSxhQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJtYXQtZm9ybS1maWVsZCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG5pbnB1dCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG59XG5cbmlucHV0W3R5cGU9ZmlsZV0ge1xuICBkaXNwbGF5OiBub25lO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["EventEmitter","FormControl","FormGroup","Validators","i0","PostCreateComponent","constructor","router","http","activatedRoute","title","content","form","validators","required","updateOn","console","log","post","test","ngOnInit","paramMap","subscribe","params","get","mode","postId","getPost","setValue","onCreatePost","invalid","isLoading","value","data","success","patch","reset","patchValue","selectors","outputs","newPost","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/mac/Documents/messages-social/frontend/src/app/components/post-create/post-create.component.ts","/Users/mac/Documents/messages-social/frontend/src/app/components/post-create/post-create.component.html"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { Post } from 'src/app/interfaces/posts.model';\nimport { HttpService } from 'src/app/services/http.service';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.scss']\n})\nexport class PostCreateComponent implements OnInit {\n    postId: any = \"\";\n    post: any = { title: \"\", content: \"\" };\n    test:any;\n    mode = \"create\";\n    isLoading = false;\n    form:FormGroup;\n    @Output() newPost = new EventEmitter<any>();\n\n    constructor(private router: Router, private http: HttpService, private activatedRoute: ActivatedRoute){\n      this.form = new FormGroup({\n        title: new FormControl(\"\", { validators: [Validators.required], updateOn: \"blur\" }),\n        content: new FormControl(\"\", { validators: [Validators.required], updateOn: \"blur\" })\n      });\n      console.log(\"post\", this.post);\n      console.log(\"test\", this.test);\n    }\n\n    ngOnInit(): void {\n      this.activatedRoute.paramMap.subscribe((params: ParamMap) => {\n        if(params.get(\"id\")){\n          this.mode = \"edit\";\n          this.postId = params.get(\"id\");\n          console.log(\"this.post onInit\", this.post);\n          const post = this.getPost();\n          this.form.setValue({ title: this.post?.title, content: this.post?.content });\n        }else {\n          this.mode = \"create\";\n          this.postId = \"\";\n        }\n      })\n    }\n\n    onCreatePost(){\n      if (this.form.invalid) return;\n\n      if(this.mode === \"create\"){\n        this.isLoading = true;\n        this.http.post(\"posts\", {title: this.form.value.title, content: this.form.value.content}, (data: any) => {\n          if(data.success){\n            this.isLoading = false;\n          }\n        });\n      }else if(this.mode === \"edit\"){\n        this.isLoading = true;\n        this.http.patch(`posts/${this.postId}`, {title: this.form.value.title, content: this.form.value.content}, (data: any) => {\n          if(data.success){\n            console.log(\"sent\");\n            this.isLoading = false;\n          }\n        });\n      }\n\n      this.form.reset();\n    }\n\n    getPost(){\n      this.http.get(`posts/${this.postId}`, (data: any) => {\n        this.post = this.form.patchValue({\n          title: data.data.title,\n          content: data.data.content\n        });\n\n      })\n    }\n\n\n}\n","<section class=\"container\">\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <mat-card>\n    <mat-card-content>\n      <form [formGroup]=\"form\" (ngSubmit)=\"onCreatePost()\">\n        <mat-form-field>\n          <input\n            type=\"text\"\n            placeholder=\"Post title\"\n            matInput\n            name=\"title\"\n            formControlName=\"title\"\n            />\n            [value]=\"post.title\"\n          <mat-error *ngIf=\"form.get('title')\">Post Title is required</mat-error>\n        </mat-form-field>\n\n        <br>\n\n        <div>\n          <button mat-stroked-button (click)=\"filePicker.click()\">Pick Image</button>\n          <input type=\"file\" #filePicker>\n        </div>\n\n        <br>\n\n        <mat-form-field>\n          <textarea\n            placeholder=\"Post content\"\n            id=\"content\"\n            cols=\"30\"\n            rows=\"10\"\n            name=\"content\"\n            matInput\n            formControlName=\"content\"\n            [value]=\"post.title\"\n          ></textarea>\n          <mat-error *ngIf=\"form.get('content')\">Content is required</mat-error>\n        </mat-form-field>\n\n        <br>\n\n        <button type=\"submit\" mat-raised-button color=\"primary\">Save Post</button>\n      </form>\n    </mat-card-content>\n  </mat-card>\n</section>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}