{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:5000\";\n    this.version = \"/api/v1/\";\n  }\n  get(path, cb) {\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.get(endPoint).subscribe(data => {\n      if (data.success) {\n        cb(data);\n      } else {\n        console.log(\"Error\");\n      }\n    });\n  }\n  post(path, body, cb) {\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.post(endPoint, body).subscribe(data => {\n      if (data.success) {\n        cb(data);\n      } else {\n        console.log(\"err\");\n      }\n    });\n  }\n  delete(path, cb) {\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.delete(endPoint).subscribe(data => {\n      if (data.success) {\n        cb(data);\n      } else {\n        console.log(\"err\");\n      }\n    });\n  }\n  patch(path, data, cb) {\n    console.log(\"hit here....\");\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.patch(endPoint, data).subscribe(data => {\n      if (data.success) {\n        cb(data);\n      }\n    });\n  }\n  search(path, query, cb) {\n    const endPoint = this.baseUrl + this.version + path;\n    const params = new HttpParams({\n      fromObject: query\n    });\n    this.http.get(endPoint, {\n      params\n    }).subscribe(data => {\n      if (data) {\n        cb(data);\n      } else {\n        console.log(\"Error\");\n      }\n    });\n  }\n}\nHttpService.ɵfac = function HttpService_Factory(t) {\n  return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n};\nHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpService,\n  factory: HttpService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAO7D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHxB,YAAO,GAAG,uBAAuB;IACjC,YAAO,GAAI,UAAU;EAEmB;EAExCC,GAAG,CAACC,IAAY,EAAEC,EAAO;IACvB,MAAMC,QAAQ,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,OAAO,GAAGJ,IAAI;IACnD,IAAI,CAACF,IAAI,CAACC,GAAG,CAACG,QAAQ,CAAC,CAACG,SAAS,CAAEC,IAAS,IAAI;MAC9C,IAAGA,IAAI,CAACC,OAAO,EAAC;QACdN,EAAE,CAACK,IAAI,CAAC;OACT,MAAK;QACJE,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;;IAExB,CAAC,CAAC;EACJ;EAEAC,IAAI,CAACV,IAAY,EAAEW,IAAS,EAAEV,EAAO;IACnC,MAAMC,QAAQ,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,OAAO,GAAGJ,IAAI;IACnD,IAAI,CAACF,IAAI,CAACY,IAAI,CAACR,QAAQ,EAAES,IAAI,CAAC,CAACN,SAAS,CAAEC,IAAS,IAAI;MACrD,IAAIA,IAAI,CAACC,OAAO,EAAE;QAChBN,EAAE,CAACK,IAAI,CAAC;OACT,MAAK;QACJE,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;;IAEtB,CAAC,CAAC;EACJ;EAEAG,MAAM,CAACZ,IAAY,EAAEC,EAAO;IAC1B,MAAMC,QAAQ,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,OAAO,GAAGJ,IAAI;IACnD,IAAI,CAACF,IAAI,CAACc,MAAM,CAACV,QAAQ,CAAC,CAACG,SAAS,CAAEC,IAAS,IAAI;MACjD,IAAGA,IAAI,CAACC,OAAO,EAAC;QACdN,EAAE,CAACK,IAAI,CAAC;OACT,MAAK;QACJE,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;;IAEtB,CAAC,CAAC;EACJ;EAEAI,KAAK,CAACb,IAAY,EAAEM,IAAS,EAAEL,EAAO;IACpCO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,MAAMP,QAAQ,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,OAAO,GAAGJ,IAAI;IACnD,IAAI,CAACF,IAAI,CAACe,KAAK,CAACX,QAAQ,EAAEI,IAAI,CAAC,CAACD,SAAS,CAAEC,IAAS,IAAI;MACtD,IAAIA,IAAI,CAACC,OAAO,EAAE;QAChBN,EAAE,CAACK,IAAI,CAAC;;IAEZ,CAAC,CAAC;EACJ;EAEAQ,MAAM,CAACd,IAAY,EAAEe,KAAU,EAAEd,EAAO;IACtC,MAAMC,QAAQ,GAAG,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,OAAO,GAAGJ,IAAI;IACnD,MAAMgB,MAAM,GAAG,IAAIrB,UAAU,CAAC;MAC5BsB,UAAU,EAAEF;KACb,CAAC;IAEF,IAAI,CAACjB,IAAI,CAACC,GAAG,CAACG,QAAQ,EAAE;MAAEc;IAAM,CAAE,CAAC,CAACX,SAAS,CAACC,IAAI,IAAG;MACnD,IAAGA,IAAI,EAAC;QACNL,EAAE,CAACK,IAAI,CAAC;OACT,MAAI;QACHE,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;;IAExB,CAAC,CAAC;EAEJ;;AAhEWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAFV;AAAM","names":["HttpParams","HttpService","constructor","http","get","path","cb","endPoint","baseUrl","version","subscribe","data","success","console","log","post","body","delete","patch","search","query","params","fromObject","factory","providedIn"],"sourceRoot":"","sources":["/Users/mac/Documents/messages-social/frontend/src/app/services/http.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { retry } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  baseUrl = \"http://localhost:5000\";\n  version =  \"/api/v1/\";\n\n  constructor(private http: HttpClient) { }\n\n  get(path: string, cb: any){\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.get(endPoint).subscribe((data: any) => {\n      if(data.success){\n        cb(data);\n      }else {\n        console.log(\"Error\");\n      }\n    });\n  }\n\n  post(path: string, body: any, cb: any){\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.post(endPoint, body).subscribe((data: any) => {\n      if (data.success) {\n        cb(data);\n      }else {\n        console.log(\"err\");\n      }\n    });\n  }\n\n  delete(path: string, cb: any,){\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.delete(endPoint).subscribe((data: any) => {\n      if(data.success){\n        cb(data);\n      }else {\n        console.log(\"err\");\n      }\n    });\n  }\n\n  patch(path: string, data: any, cb: any){\n    console.log(\"hit here....\")\n    const endPoint = this.baseUrl + this.version + path;\n    this.http.patch(endPoint, data).subscribe((data: any) => {\n      if (data.success) {\n        cb(data);\n      }\n    })\n  }\n\n  search(path: string, query: any, cb: any){\n    const endPoint = this.baseUrl + this.version + path;\n    const params = new HttpParams({\n      fromObject: query\n    });\n\n    this.http.get(endPoint, { params }).subscribe(data => {\n      if(data){\n        cb(data);\n      }else{\n        console.log(\"Error\");\n      }\n    })\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}